#!/usr/bin/env python

import sys
import argparse
from datetime import date, timedelta
import math

from PySide import QtCore, QtGui
from PySide.QtCore import QPointF, QRectF

MEDIUM = '-misc-fixed-medium-r-normal--13-120-75-75-c-80-iso8859-1'
BOLD = '-misc-fixed-bold-r-normal--13-120-75-75-c-80-iso8859-1'

SCROLL = 200
HEIGHT = 15

class View(QtGui.QGraphicsView):
    def __init__(self, parent=None):
        super(View, self).__init__(parent)
        self.setFrameStyle(0)

        # Arguments
        p = argparse.ArgumentParser()
        p.parse_args()

        # print p.calendars[0]

        # Fonts
        fonts = {}

        # xlsfonts gets you the list
        self.medium = QtGui.QFont(MEDIUM)
        self.medium.setRawMode(True)
        self.medium.rawName() # Needed to display the right font, bizarrely

        self.bold = QtGui.QFont(BOLD)
        self.bold.setRawMode(True)
        self.bold.rawName() # Needed to display the right font, bizarrely

        # Disable normal scrolling
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        # Scrolling
        self.anim = QtCore.QPropertyAnimation(self, 'sceneRect')
        self.anim.setDuration(1000)
        self.anim.setEasingCurve(QtCore.QEasingCurve.OutQuad)

        self.days = set()

    def scenesize(self):
        return self.sceneRect().size()

    def scroll(self, size, anim, dist):
        current = anim.currentValue()
        end = current.y() + dist if current else dist

        # Find out which day will be visible in the end
        if dist < 0:
            day = math.floor((end / (24 * HEIGHT)))
        else:
            day = math.floor(((end + self.viewsize.height())/ (24 * HEIGHT)))
        self.addday(self.scene(), self.viewsize, self.days, int(day))

        # TODO Remove faraway random days from scenes

        # Scroll
        anim.stop()
        anim.setEndValue(QRectF(QPointF(0, end), size))
        anim.start()

    def keyPressEvent(self, event):
        # FIXME Should it be relative to view size instead?
        if event.text() == 'k':
            self.scroll(self.scenesize(), self.anim, -SCROLL)
        elif event.text() == 'j':
            self.scroll(self.scenesize(), self.anim, SCROLL)

    def vprint(self, scene, string, font, colour, y, offset):
        for i, c in enumerate(string):
            item = QtGui.QGraphicsTextItem(c)
            item.setDefaultTextColor(colour)
            item.setFont(font)
            item.setPos(0, y + (i + offset) * HEIGHT)
            scene.addItem(item)
        return i

    def addevent(self, scene, viewsize):
        # XXX Text and boxes all perfect - now we need to come up with rules

        # Same x distance as between days and hours
        # Set y offset such that it's centered on hour 
        r0 = QtGui.QGraphicsRectItem(76, 11, viewsize.width() - 13 - 76, 1 * 15 + 1)
        r1 = QtGui.QGraphicsRectItem(76, 11 + 15 * 7,
                                     viewsize.width() - 13 - 76, 3 * 15 + 1)
        r0.setBrush(QtGui.QColor(QtCore.Qt.red))
        r1.setBrush(QtGui.QColor(QtCore.Qt.red))
        scene.addItem(r0)
        scene.addItem(r1)

        t = QtGui.QGraphicsTextItem("Some random global pevent")
        t.setDefaultTextColor(QtCore.Qt.white)
        t.setFont(self.bold)
        t.setPos(76, 7)
        scene.addItem(t)



    def addday(self, scene, viewsize, days, day):
        if day in self.days:
            return

        y = day * 24 * HEIGHT
        # Draw line
        line = QtGui.QGraphicsLineItem(0, y + 5, viewsize.width(), y + 5)
        line.setPen(QtGui.QColor(QtCore.Qt.white))
        scene.addItem(line)

        # Display day label
        t = (date.today() + timedelta(day)).strftime('%A %d %B').split()
        offset = self.vprint(scene, t[0], self.bold, QtCore.Qt.cyan, y, 0)
        offset = self.vprint(scene, ' '.join(t[1:]), self.bold,
                             QtCore.Qt.white, y, offset + 2)

        # Display hours
        # self.effects = []
        for i in range(24):
            # effects.append(QtGui.QGraphicsBlurEffect())
            # effects[i].setBlurRadius(8)

            item = QtGui.QGraphicsTextItem('%02d:00' % i)
            item.setDefaultTextColor(QtCore.Qt.white)
            item.setFont(self.medium)
            item.setPos(20, y + i * HEIGHT)
            # items[i].setGraphicsEffect(effects[i])
            scene.addItem(item)

        days.add(y / (24 * HEIGHT)) # FIXME Can you just count days?

    def resizeEvent(self, event):
        if event.oldSize() != QtCore.QSize(-1, -1): # First size is bollocks
            self.viewsize = event.size()

            self.setSceneRect(QRectF(QPointF(0, 0), event.size()))

            # Compute how many days can fit
            maxdays = int(math.ceil(self.viewsize.height() / (24. * HEIGHT)))

            for j in range(maxdays):
                self.addday(self.scene(), self.viewsize, self.days, j)
            self.addevent(self.scene(), self.viewsize)

def main():
    app = QtGui.QApplication(sys.argv)
    scene = QtGui.QGraphicsScene()
    scene.setBackgroundBrush(QtCore.Qt.black)

    view = View(scene)
    view.setWindowTitle("Calendar")
    view.show()
    app.exec_()

if __name__ == '__main__':
    main()
